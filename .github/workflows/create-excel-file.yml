# This workflow is named "Generate Pipeline & Repo Info Excel"
name: Generate Pipeline & Repo Info Excel

# This workflow can be triggered manually from the GitHub Actions UI.
on:
  workflow_dispatch:

# Define a single job named 'create-excel-report'
jobs:
  create-excel-report:
    # This job will run on a Windows-based runner.
    runs-on: windows-latest

    # Define the steps for this job
    steps:
      # Step 1: Checkout the repository code.
      # This is essential to access your PowerShell script.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Cache PowerShell modules.
      # This step checks if the required PowerShell modules are already in cache.
      # If found, it restores them, significantly speeding up subsequent runs.
      - name: Cache PowerShell Modules
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\Documents\PowerShell\Modules # Default path for CurrentUser scope
            C:\Program Files\PowerShell\Modules # Common path for AllUsers scope
          key: ${{ runner.os }}-powershell-modules-v1 # Unique key for the cache
          restore-keys: |
            ${{ runner.os }}-powershell-modules- # Fallback key for partial match

      # Step 3: Execute the PowerShell script to create the Excel file.
      # We are now passing the workflow name, run number, repository name, and full commit SHA.
      - name: Execute PowerShell Script and Create Excel
        shell: powershell # Specify PowerShell as the shell for this step
        run: |
          # The script path is relative to the root of your repository.
          # -PipelineName: The name of the currently running workflow.
          # -RunNumber: The unique incremental number for each workflow run in a repository.
          # -RepoName: The name of the GitHub repository (e.g., 'my-org/my-repo').
          # -CommitSha: The full SHA of the commit that triggered the workflow.
          ./scripts/create-excel-report-pipeline.ps1 `
            -PipelineName "${{ github.workflow }}" `
            -RunNumber "${{ github.run_number }}" `
            -RepoName "${{ github.repository }}" `
            -CommitSha "${{ github.sha }}"

      # Step 4: Upload the generated Excel file as a workflow artifact.
      # This makes the 'pipeline_repo_info.xlsx' file available for download from the GitHub Actions UI.
      - name: Upload Excel File as Artifact
        uses: actions/upload-artifact@v4 # Use the upload-artifact action
        with:
          name: pipeline-repo-info-excel # The name of the artifact (how it will appear for download)
          path: pipeline_repo_info.xlsx # The path to the file to upload (must match the file name in your script)
          retention-days: 5 # How many days to retain this artifact before it's automatically deleted
